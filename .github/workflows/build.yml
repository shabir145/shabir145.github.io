name: Build for Windows and Linux

on:
  push:
    branches:
      - main  # Trigger the action when changes are pushed to the 'main' branch
  pull_request:
    branches:
      - main  # Also trigger when a PR is created against the 'main' branch

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build for Linux
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      - name: Set execute permission for Linux binary
        run: chmod +x target/x86_64-unknown-linux-gnu/release/organize

      - name: Create TAR.GZ archive of Linux binary
        run: |
          tar -czvf organize_linux_x86_64.tar.gz -C target/x86_64-unknown-linux-gnu/release organize

      - name: Upload Linux binary as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: organize-linux-binary
          path: organize_linux_x86_64.tar.gz

  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Add Windows target
        run: rustup target add x86_64-pc-windows-gnu

      - name: Build for Windows
        run: cargo build --release --target x86_64-pc-windows-gnu

      - name: Create ZIP archive of Windows binary
        run: Compress-Archive -Path target\x86_64-pc-windows-gnu\release\organize.exe -DestinationPath organize_windows_x86_64.zip

      - name: Upload Windows binary as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: organize-windows-binary
          path: organize_windows_x86_64.zip

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all tags are fetched

      - name: Get latest tag or default
        id: get_version
        run: |
          if git describe --tags --abbrev=0 > /dev/null 2>&1; then
            TAG=$(git describe --tags --abbrev=0)
          else
            TAG="v0.1.0"
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Create new tag
        run: |
          NEW_TAG=$(echo $TAG | awk -F. -v OFS=. '{$NF += 1 ; print}')
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag $NEW_TAG
          git push https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git $NEW_TAG

      - name: Download Linux binary artifact
        uses: actions/download-artifact@v3
        with:
          name: organize-linux-binary

      - name: Download Windows binary artifact
        uses: actions/download-artifact@v3
        with:
          name: organize-windows-binary

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          files: |
            organize_windows_x86_64.zip
            organize_linux_x86_64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
